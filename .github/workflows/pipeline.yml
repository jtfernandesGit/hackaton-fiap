# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  Tests:
   name: Tests
   runs-on: ubuntu-latest
   steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install Requirements
        run: pip install flask flask-wtf pytest pytest-cov

  Build:
    needs: Tests
    name: Build
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Docker Login
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          ARTIFACT_REGISTRY:  ${{ secrets.ARTIFACT_REGISTRY}}
        run: | 
          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > key.json
          cat key.json | docker login -u _json_key --password-stdin ${{ secrets.ARTIFACT_REGISTRY }}
      - name: Build Image & Push
        env: 
          ARTIFACT_REGISTRY_REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }}
        run: | 
          docker build -t ${{ secrets.ARTIFACT_REGISTRY_REPO }}/myapp:latest .
          docker push ${{ secrets.ARTIFACT_REGISTRY_REPO }}/myapp:latest

  Deploy:
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Clone do Repositório
        uses: actions/checkout@v2

      - name: Autenticação no Google Cloud
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Deploy Backend no  Cloud Run
        id: deploy
        run: |-
          gcloud run deploy backend \
            --quiet \
            --region  ${{ secrets.GOOGLE_REGION }} \
            --image ${{ secrets.ARTIFACT_REGISTRY_REPO }}/backend:latest \
            --platform managed \
            --set-env-vars CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME }},CLOUD_SQL_DATABASE_NAME=${{ secrets.CLOUD_SQL_DATABASE_NAME }},CLOUD_SQL_PASSWORD=${{ secrets.CLOUD_SQL_PASSWORD }},CLOUD_SQL_USERNAME=${{ secrets.CLOUD_SQL_USERNAME }} \
            --allow-unauthenticated \
            --add-cloudsql-instances ${{ secrets.CLOUD_SQL_CONNECTION_NAME }} \
            --project ${{ secrets.GOOGLE_PROJECT_ID }} \
            --format json
  